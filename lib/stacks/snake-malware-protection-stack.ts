import * as cdk from 'aws-cdk-lib';
import { Fn } from 'aws-cdk-lib';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as ssm from 'aws-cdk-lib/aws-ssm';
import { Construct } from 'constructs';

import { SnakeMalwareProtection } from '../constructs/snake-malware-protection';
import { CommonConfig, EnvironmentConfig } from '../models';

export interface SnakeMalwareProtectionStackProps extends cdk.StackProps {
  envConfig: EnvironmentConfig;
  common: CommonConfig;
  environment: string;
}

export class SnakeMalwareProtectionStack extends cdk.Stack {
  public readonly malwareDnsServer: {
    instanceId: string;
    privateIp: string;
  };

  constructor(scope: Construct, id: string, props: SnakeMalwareProtectionStackProps) {
    super(scope, id, props);

    const { envConfig, common, environment } = props;

    // Import the existing VPC using the exported VPC ID
    const snakeVpc = ec2.Vpc.fromLookup(this, `Snake-Imported-VPC-${environment}`, {
      vpcId: envConfig.vpcId,
      region: common.region,
      ownerAccountId: common.accountId,
    });

    // Fetch whitelist domains directly from SSM at deployment time
    let whitelistDomains = '';

    if (common.whitelistDomainsParameter) {
      try {
        // Use CDK's SSM parameter reference to get the value at deployment time
        // For a StringList parameter, we need to access it as a StringListParameter
        const whitelistDomainsParameter = ssm.StringListParameter.fromStringListParameterName(
          this,
          `Snake-DNS-Whitelist-Domains-Parameter-${environment}`,
          common.whitelistDomainsParameter,
        );

        // This will be resolved during deployment
        // For StringList parameters, we need to join the values with a comma
        whitelistDomains = Fn.join(',', whitelistDomainsParameter.stringListValue);
        console.log(`Using whitelist domains from parameter: ${common.whitelistDomainsParameter}`);
      } catch (error) {
        // If there's an error accessing the parameter, log it and continue with an empty whitelist
        console.warn(`Failed to fetch whitelist domains parameter: ${error}`);
      }
    }

    // Create the malware protection construct
    const malwareProtection = new SnakeMalwareProtection(this, `Snake-Malware-Protection-${environment}`, {
      vpc: snakeVpc,
      environment,
      vpcSubnets: {
        subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS,
      },
      whitelistDomains: whitelistDomains,
    });

    // Create a tag for the instance
    cdk.Tags.of(malwareProtection.instance).add('Name', `Snake-Malware-Protection-${environment}`);

    // Export the instance and IP for use in other stacks
    this.malwareDnsServer = {
      instanceId: malwareProtection.instance.instanceId,
      privateIp: malwareProtection.instance.instancePrivateIp,
    };

    // Create a CloudFormation export for the private IP that can be imported in other stacks
    new cdk.CfnOutput(this, `Snake-Malware-IP-Export-${environment}`, {
      value: malwareProtection.instance.instancePrivateIp,
      description: `Malware Protection DNS Server IP (${environment})`,
      exportName: `Snake-Malware-DNS-IP-${environment}`,
    });
  }
}
