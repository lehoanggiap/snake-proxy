import * as fs from 'fs';
import * as path from 'path';

import * as cdk from 'aws-cdk-lib';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as iam from 'aws-cdk-lib/aws-iam';
import { Construct } from 'constructs';

export interface SnakeMalwareProtectionProps {
  vpc: ec2.IVpc;
  environment: string;
  vpcSubnets?: ec2.SubnetSelection;
  whitelistDomains?: string;
}

export class SnakeMalwareProtection extends Construct {
  public readonly instance: ec2.Instance;
  public readonly securityGroup: ec2.SecurityGroup;

  constructor(scope: Construct, id: string, props: SnakeMalwareProtectionProps) {
    super(scope, id);

    const {
      vpc,
      environment,
      vpcSubnets,
      whitelistDomains,
    } = props;

    // Create security group for EC2 instance
    this.securityGroup = new ec2.SecurityGroup(this, `Snake-Malware-Security-Group-${environment}`, {
      vpc,
      description: `Security group for Malware Protection Server (${environment})`,
      allowAllOutbound: true,
    });

    // Allow DNS access from VPC CIDR
    this.securityGroup.addIngressRule(
      ec2.Peer.ipv4(vpc.vpcCidrBlock),
      ec2.Port.udp(53),
      'Allow DNS access from VPC',
    );
    this.securityGroup.addIngressRule(
      ec2.Peer.ipv4(vpc.vpcCidrBlock),
      ec2.Port.tcp(53),
      'Allow DNS access from VPC',
    );

    // Create IAM role for the instance
    const role = new iam.Role(this, `Snake-Malware-Role-${environment}`, {
      assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),
      managedPolicies: [
        iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonSSMManagedInstanceCore'),
        iam.ManagedPolicy.fromAwsManagedPolicyName('CloudWatchAgentServerPolicy'),
      ],
    });

    // Load user data script
    const userDataScript = this.loadUserDataScript(whitelistDomains);

    // Create a single EC2 instance
    this.instance = new ec2.Instance(this, `Snake-Malware-Instance-${environment}`, {
      vpc,
      vpcSubnets: vpcSubnets || { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },
      securityGroup: this.securityGroup,
      instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.MICRO),
      machineImage: new ec2.AmazonLinuxImage({
        generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,
      }),
      role,
      userData: ec2.UserData.custom(userDataScript),
    });

    // Export private IP through CloudFormation
    new cdk.CfnOutput(this, `Snake-Malware-IP-${environment}`, {
      value: this.instance.instancePrivateIp,
      description: `Malware Protection DNS Server IP (${environment})`,
      exportName: `Snake-Malware-IP-${environment}`,
    });
  }

  private loadUserDataScript(whitelistDomains?: string): string {
    // Load the dedicated malware protection script
    const scriptPath = path.join(__dirname, '..', '..', 'scripts', 'malware-protection-setup.sh');
    let script = fs.readFileSync(scriptPath, 'utf8');

    // Replace the placeholder for whitelist domains
    if (whitelistDomains && whitelistDomains.trim() !== '') {
      // Simply replace the placeholder with the actual whitelist domains
      script = script.replace('__WHITELIST_DOMAINS__', whitelistDomains);
    }

    return script;
  }
}
