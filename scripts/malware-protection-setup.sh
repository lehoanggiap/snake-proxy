#!/bin/bash

# Install required packages
yum update -y
yum install -y git amazon-ssm-agent

# Start and enable SSM Agent (for secure remote access via AWS Systems Manager)
systemctl enable amazon-ssm-agent
systemctl start amazon-ssm-agent

# Create a backup of the original hosts file
cp /etc/hosts /etc/hosts.original.backup

# Create directory for hosts file management
mkdir -p /opt/hosts-manager
cd /opt/hosts-manager

# Clone the Steven Black hosts repository
git clone https://github.com/StevenBlack/hosts.git
cd hosts

# Download the most comprehensive hosts file (includes all: fakenews, gambling, porn, social)
curl -o /etc/hosts https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling-porn-social/hosts

# Create a whitelist file for domains you want to allow
mkdir -p /etc/dnsmasq-whitelist
cat > /etc/dnsmasq-whitelist/whitelist.conf << EOF
# Add domains to whitelist (one per line)
# Example:
# server=/example.com/8.8.8.8
# server=/alloweddomain.com/8.8.8.8
EOF

# Create a script to process whitelist domains
cat > /opt/hosts-manager/process-whitelist.sh << EOF
#!/bin/bash
# Script to process and add whitelist domains to dnsmasq configuration

# The whitelist domains are passed as a comma-separated list
WHITELIST_DOMAINS="\$1"
echo "Processing whitelist domains: \$WHITELIST_DOMAINS"

if [ -n "\$WHITELIST_DOMAINS" ]; then
  echo "Adding domains to whitelist..."
  
  # Convert comma-separated list to array and add each domain to whitelist
  IFS=',' read -ra DOMAIN_LIST <<< "\$WHITELIST_DOMAINS"
  for DOMAIN in "\${DOMAIN_LIST[@]}"; do
    # Trim whitespace
    DOMAIN=\$(echo "\$DOMAIN" | xargs)
    if [ -n "\$DOMAIN" ]; then
      echo "Adding \$DOMAIN to whitelist"
      echo "server=/\$DOMAIN/8.8.8.8" >> /etc/dnsmasq-whitelist/whitelist.conf
    fi
  done
  
  echo "Added \$(grep -c "server=/" /etc/dnsmasq-whitelist/whitelist.conf) domains to whitelist."
else
  echo "No whitelist domains provided."
fi
EOF

chmod +x /opt/hosts-manager/process-whitelist.sh

# Execute the whitelist processing script with the domains provided at deployment time
# The placeholder will be replaced by CDK during deployment
echo "Executing whitelist processing script..."
/opt/hosts-manager/process-whitelist.sh "__WHITELIST_DOMAINS__"

# Install and configure dnsmasq to serve the hosts file
yum install -y dnsmasq

# Configure dnsmasq
cat > /etc/dnsmasq.conf << EOF
# DNS settings
port=53
domain-needed
bogus-priv
no-resolv
no-poll

# Use Google DNS as upstream servers
server=8.8.8.8
server=8.8.4.4

# Use hosts file
addn-hosts=/etc/hosts

# Import whitelist configuration
conf-dir=/etc/dnsmasq-whitelist

# Listen only on private interfaces (no public interfaces)
interface=eth0
bind-interfaces

# Other useful options
cache-size=10000
neg-ttl=3600
local-ttl=3600
EOF

# Enable and start dnsmasq
systemctl enable dnsmasq
systemctl start dnsmasq

# Create a helper script to add domains to the whitelist
cat > /opt/hosts-manager/add-to-whitelist.sh << EOF
#!/bin/bash
# Check if domain parameter is provided
if [ -z "\$1" ]; then
  echo "Usage: \$0 domain.com"
  echo "Example: \$0 example.com"
  exit 1
fi

DOMAIN=\$1

# Use the process-whitelist script to add the domain
echo "Adding domain to whitelist: \$DOMAIN"
/opt/hosts-manager/process-whitelist.sh "\$DOMAIN"

# Restart dnsmasq to apply changes
systemctl restart dnsmasq

echo "Domain \${DOMAIN} has been added to the whitelist."
echo "You can access this domain now."
EOF

chmod +x /opt/hosts-manager/add-to-whitelist.sh

# Set up automatic hosts file updates using cron
cat > /opt/hosts-manager/update-hosts.sh << EOF
#!/bin/bash
# Backup current hosts file
cp /etc/hosts /etc/hosts.bak
# Download fresh comprehensive hosts file => about 7MB 
curl -o /etc/hosts https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling-porn-social/hosts
# Restart dnsmasq to apply changes
systemctl restart dnsmasq
# Log the update
echo "Hosts file updated on \$(date)" >> /var/log/hosts-updates.log
EOF

chmod +x /opt/hosts-manager/update-hosts.sh

# Add a weekly cron job to update the hosts file
echo "0 0 * * 0 root /opt/hosts-manager/update-hosts.sh" > /etc/cron.d/update-hosts

# Create a status file for monitoring
PRIVATE_IP=$(hostname -I | awk '{print $1}')
WHITELISTED=$(grep -c "server=/" /etc/dnsmasq-whitelist/whitelist.conf || echo "0")
cat > /opt/hosts-manager/status.txt << EOF
Malware Protection DNS Server Status
----------------------------------
DNS Server: Running (dnsmasq)
Private IP: ${PRIVATE_IP}
Hosts File: Comprehensive (adware + malware + fakenews + gambling + porn + social)
Blocked Domains: $(grep -c "^0\.0\.0\.0" /etc/hosts)
Whitelisted Domains: ${WHITELISTED}
Last Updated: $(date)
Auto-Update Schedule: Weekly (Sunday midnight)
----------------------------------
Whitelist Management:
  - To add a domain: /opt/hosts-manager/add-to-whitelist.sh domain.com
  - To add multiple domains: /opt/hosts-manager/process-whitelist.sh "domain1.com,domain2.com"
  - Whitelist file: /etc/dnsmasq-whitelist/whitelist.conf
----------------------------------
EOF

echo "Malware protection DNS server setup complete!"
echo "DNS service is running on port 53 and is accessible only from within the VPC"
echo "Status information saved to /opt/hosts-manager/status.txt"
echo "To whitelist a domain, use: /opt/hosts-manager/add-to-whitelist.sh domain.com" 